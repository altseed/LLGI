#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec2 Current;
    vec2 Next;
    vec2 Velocity;
    float Pscl;
    uint IsFix;
};

layout(binding = 0, std430) buffer particles
{
    Particle _data[];
} particles_1;

layout(binding = 0, std140) uniform CB
{
    vec2 Force;
    vec2 Gravity;
    vec2 Dt;
    ivec2 GridNum;
    ivec2 GridSize;
} CBCS0;

void _main(uvec3 dtid)
{
    if (particles_1._data[dtid.x].IsFix != 0u)
    {
        return;
    }
    particles_1._data[dtid.x].Velocity += ((CBCS0.Gravity + CBCS0.Force) * CBCS0.Dt.x);
    vec2 pos = particles_1._data[dtid.x].Current + (particles_1._data[dtid.x].Velocity * CBCS0.Dt.x);
    pos.x = clamp(pos.x, 8.0, float((CBCS0.GridNum.x * CBCS0.GridSize.x) - 8));
    pos.y = clamp(pos.y, 8.0, float((CBCS0.GridNum.y * CBCS0.GridSize.y) - 8));
    particles_1._data[dtid.x].Next = pos;
}

void main()
{
    uvec3 dtid = gl_GlobalInvocationID;
    uvec3 param = dtid;
    _main(param);
}

