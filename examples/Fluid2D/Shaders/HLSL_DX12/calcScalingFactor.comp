struct Particle
{
    float2 Current;
    float2 Next;
    float2 Velocity;
    float Pscl;
    bool IsFix;
};

#define EMPTY_CELL 0x7fffffff

int GetHash(int2 gridPos, int num)
{
    return gridPos.x + gridPos.y * num;
}

int2 GetGridPos(float2 pos, float2 gridSize)
{
    return pos / gridSize;
}

cbuffer CB : register(b0)
{
    int2 GridNum;
    int2 GridSize;
    float EffectiveRadius;
    float Density;
    float Eps;
    float Dt;
    float Wpoly6;
    float GWspiky;
};
RWStructuredBuffer<Particle> particles : register(u0);
RWStructuredBuffer<int2> gridTable : register(u1);
RWStructuredBuffer<int2> gridIndicesTable : register(u2);

float2 CalcDensityCellPB(int2 gridPos, int i, float2 pos0)
{
    int gridHash = GetHash(gridPos, GridNum.x);
    int startIndex = gridIndicesTable[gridHash].x;
    float h2 = EffectiveRadius * EffectiveRadius;
    float dens = 0.0f;
    if(startIndex != EMPTY_CELL){
        int endIndex = gridIndicesTable[gridHash].y;
        for(int j = startIndex; j < endIndex; ++j){
            float2 pos1 = particles[gridTable[j].y].Next;
            float r2 = dot(pos0 - pos1, pos0 - pos1);
            if(r2 <= h2){
                float q = h2 - r2;
                dens += Wpoly6 * q * q * q;
            }
        }
    }
    return dens;
}

float CalcScalingFactorCell(int2 gridPos, int i, float2 pos0)
{
    int gridHash = GetHash(gridPos, GridNum.x);
    int startIndex = gridIndicesTable[gridHash].x;
    float h = EffectiveRadius;
    float r0 = Density;
    float sd = 0.0f;
    float2 sd2 = float2(0.0f, 0.0f);
    if(startIndex != EMPTY_CELL){
        uint endIndex = gridIndicesTable[gridHash].y;
        for(uint j = startIndex; j < endIndex; ++j){
            float2 pos1 = particles[gridTable[j].y].Next;
            float2 rij = pos0 - pos1;
            float r = length(rij);
            if(r <= h && r > 0.0){
                float q = h - r;
                float2 dp = (GWspiky * q * q * rij / r) / r0;
                sd2 += dp;
                sd += dot(dp, dp);
            }
        }
    }
    return sd + dot(sd2, sd2);
}

void CalcScalingFactor(int id)
{
    float2 pos = particles[id].Next;
    float h = EffectiveRadius;
    float r0 = Density;
    int2 grid_pos0 = GetGridPos(pos-float2(h, h), GridSize);
    int2 grid_pos1 = GetGridPos(pos+float2(h, h), GridSize);

    float dens = 0.0f;
    float sd = 0.0f;
    for(int y = grid_pos0.y; y <= grid_pos1.y; ++y){
        for(int x = grid_pos0.x; x <= grid_pos1.x; ++x){
            int2 n_grid_pos = int2(x, y);
            dens += CalcDensityCellPB(n_grid_pos, id, pos);
            sd += CalcScalingFactorCell(n_grid_pos, id, pos);
        }
    }
    float C = dens/r0-1.0;
    particles[id].Pscl = -C/(sd+Eps);
}
[numthreads(1, 1, 1)]
void main(uint3 dtid : SV_DispatchThreadID)
{
    int id = dtid.x;
    CalcScalingFactor(id);
}