#version 430
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

struct Particle
{
    vec2 Current;
    vec2 Next;
    vec2 Velocity;
    float Pscl;
    uint IsFix;
};

struct Vertex
{
    vec3 Position;
    int Color;
    vec2 UV1;
    vec2 UV2;
};

layout(set = 0, binding = 0, std140) uniform CB
{
    float ParticleRadius;
    vec4 Color;
    vec4 FixedColor;
} _67;

layout(set = 0, binding = 1, std430) buffer particles
{
    Particle _data[];
} particles_1;

layout(set = 0, binding = 2, std430) buffer vertex_
{
    Vertex _data[];
} vertex_1;

layout(set = 0, binding = 3, std430) buffer index
{
    int _data[];
} index_1;

int DecodeFloatRGBA(vec4 rgba)
{
    int res = 0;
    res += int(rgba.w * 255.0);
    res = res << 8;
    res += int(rgba.z * 255.0);
    res = res << 8;
    res += int(rgba.y * 255.0);
    res = res << 8;
    res += int(rgba.x * 255.0);
    return res;
}

void _main(uvec3 dtid)
{
    vec4 param = mix(_67.Color, _67.FixedColor, vec4(float(particles_1._data[dtid.x].IsFix != 0u)));
    int c = DecodeFloatRGBA(param);
    for (int i = 0; i < 4; i++)
    {
        vertex_1._data[(dtid.x * 4u) + uint(i)].Color = c;
    }
    vec3 pos = vec3(particles_1._data[dtid.x].Current, 0.5);
    vertex_1._data[dtid.x * 4u].Position = pos + ((vec3(-1.0, -1.0, 0.0) * _67.ParticleRadius) * 3.0);
    vertex_1._data[(dtid.x * 4u) + 1u].Position = pos + ((vec3(1.0, -1.0, 0.0) * _67.ParticleRadius) * 3.0);
    vertex_1._data[(dtid.x * 4u) + 2u].Position = pos + ((vec3(1.0, 1.0, 0.0) * _67.ParticleRadius) * 3.0);
    vertex_1._data[(dtid.x * 4u) + 3u].Position = pos + ((vec3(-1.0, 1.0, 0.0) * _67.ParticleRadius) * 3.0);
    vertex_1._data[dtid.x * 4u].UV1 = vec2(0.0);
    vertex_1._data[(dtid.x * 4u) + 1u].UV1 = vec2(1.0, 0.0);
    vertex_1._data[(dtid.x * 4u) + 2u].UV1 = vec2(1.0);
    vertex_1._data[(dtid.x * 4u) + 3u].UV1 = vec2(0.0, 1.0);
    index_1._data[dtid.x * 6u] = int(dtid.x * 4u);
    index_1._data[(dtid.x * 6u) + 1u] = int((dtid.x * 4u) + 1u);
    index_1._data[(dtid.x * 6u) + 2u] = int((dtid.x * 4u) + 2u);
    index_1._data[(dtid.x * 6u) + 3u] = int(dtid.x * 4u);
    index_1._data[(dtid.x * 6u) + 4u] = int((dtid.x * 4u) + 2u);
    index_1._data[(dtid.x * 6u) + 5u] = int((dtid.x * 4u) + 3u);
}

void main()
{
    uvec3 dtid = gl_GlobalInvocationID;
    uvec3 param = dtid;
    _main(param);
}

